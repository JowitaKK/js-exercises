/*                          .map()                         
 Keep in mind that the resulting array will always be the same length as the original array */

var officers = [
    { id: 20, name: 'Jow K'},
    { id: 37, name: 'Marcin'},
    { id: 22, name: 'Antos'}, 
]; 

// .forEach():


var officersIds = [];

officers.forEach(function (officer){
    officersIds.push(officer.id);
});

// .map():

var officersIds = officers.map(function (officer){
    return officer.id
});

// arrow function 

const officersIds = officers.map(officer => officer.id);


/*                          .reduce()                           
also runs a callback for each element of an array. 
What’s different here is that reduce passes the result of this callback (the accumulator) 
from one array element to the other.*/

var pilots = [
    {
        id: 10,
        name: " Dameron",
        years: 14,
    },
    {
        id: 41,
        name: "Tallissan Lintra",
        years: 16,
      },
      {
        id: 99,
        name: "Ello Asty",
        years: 22,
      }
];

var totalYears = pilots.reduce(function (accumulator, pilot) {
    return accumulator + pilot.years;
}, 0); // important starting value set as 0


// arrow function 

const totalYears = pilots.reduce((acc, pilot) => acc + pilot.years, 0);


/* find which pilot is the most experienced one */

var mostExpPilot = pilots.reduce(function (oldest, pilot) {
  return (oldest.years || 0) > pilot.years ? oldest : pilot;
}, {});


/*                          .filter()                           
 an array, but only want some of the elements in it? That’s where .filter() comes in!*/
 
 var pilots = [
    {
      id: 2,
      name: "Wedge Antilles",
      faction: "Rebels",
    },
    {
      id: 8,
      name: "Ciena Ree",
      faction: "Empire",
    },
    {
      id: 40,
      name: "Iden Versio",
      faction: "Empire",
    },
    {
      id: 66,
      name: "Thane Kyrell",
      faction: "Rebels",
    }
  ];

  /*  want two arrays now: one for rebel pilots, the other one for imperia */

  var rebels = pilots.filter(function (pilot) {
      return pilot.faction === "Rebels";
  });

  var empire = pilots.filter(function (pilot){
      return pilot.faction === "Empire";
  });


// arrow function 

const rebels = pilots.filter(pilot => pilot.faction === "Rebels");
const empire = pilots.filter(pilot => pilot.faction === "Empire");

//if the callback function returns true, the current element will be in the resulting array. If it returns false, it won’t be.




//------------------------exercise joining all methods ---------------------

var personnel = [
    {
      id: 5,
      name: "Luke Skywalker",
      pilotingScore: 98,
      shootingScore: 56,
      isForceUser: true,
    },
    {
      id: 82,
      name: "Sabine Wren",
      pilotingScore: 73,
      shootingScore: 99,
      isForceUser: false,
    },
    {
      id: 22,
      name: "Zeb Orellios",
      pilotingScore: 20,
      shootingScore: 59,
      isForceUser: false,
    },
    {
      id: 15,
      name: "Ezra Bridger",
      pilotingScore: 43,
      shootingScore: 67,
      isForceUser: true,
    },
    {
      id: 11,
      name: "Caleb Dume",
      pilotingScore: 71,
      shootingScore: 85,
      isForceUser: true,
    },
  ];

 // A- person who cant use the force (filter),

 var jediPersonnel = personnel.filter(function (person){
     return person.isForceUser;
 });

    // Result: [{...}, {...}, {...}] (Luke, Ezra and Caleb)

// B- with 3 elements left in resulting array. We have to create an array with total score of each personnel 
var jediScores = jediPersonnel.map(function (score){
    return score.pilotingScore + score.shootingScore;
});
    // Result: [154, 110, 156]

// C- use reduce to get total 
var getTotalScore = jediScores.reduce(function (acc, score){
    return acc + score; 
}) 
    //result : 420



















